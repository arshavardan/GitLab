variables:
  IMAGE_NAME: registry.gitlab.com/harry-test-group/gitlab-cicd-crash-course
  IMAGE_TAG: $CI_COMMIT_SHORT_SHA

stages:
  - test
  - build
  - deploy

##adding a "." before a job will skip that particular job if we want to skip particular stages.

.run_tests:
  stage: test
  image: python:3.9-slim-buster
  before_script:
    - apt-get update && apt-get install make
  script:
    - make test

build_image:
  stage: build
  image: docker:23.0.1-cli
  services:
    - docker:23.0.1-dind
  variables:
    DOCKER_TLS_CERTDIR: "/certs"
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker build -t $IMAGE_NAME:$IMAGE_TAG .
    - docker push $IMAGE_NAME:$IMAGE_TAG
    - docker tag $IMAGE_NAME:$IMAGE_TAG $IMAGE_NAME:latest
    - docker push $IMAGE_NAME:latest

Deploy_App:
  stage: deploy
  before_script:
    - chmod 400 $SSH_KEY
  script:

## These below commands are allows the application to run over a remote SSH into an docker environment
   #- ssh -o StrictHostKeyChecking=no -i $SSH_KEY ubuntu@34.201.23.60 "   ##change the IP address of an instance and provide it with associated SSH as a variable to acess that VM
   #  docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY &&
   #  docker ps -aq | xargs docker stop | xargs docker rm &&
   #  docker run -d -p 5000:5000 $IMAGE_NAME:latest"

## this is an multi line script that is being used to run commands over an SSH remote VM
## These below commands are allows the application to run over a remote SSH into an kubernetes environment
    - ssh -o StrictHostKeyChecking=no -i $SSH_KEY ubuntu@18.206.176.49 "
      pwd && sudo kubectl get nodes && ls &&
      sudo kubectl apply -f deploysvc.yaml &&
      sudo kubectl rollout restart deploy pythonapp"
## using the above command to restart the pods one by one such that new latest image will be pulled without any downtime      

  ##   - ssh -o StrictHostKeyChecking=no -i $SSH_KEY ubuntu@34.228.7.118 "   ##change the IP address of an instance and provide it with associated SSH as a variable to acess that VM
  ##  docker ps -aq | xargs docker stop | xargs docker rm && add this command after the docker login after the first deploy
